name: analytics

on:
  push:
    branches:
      - master

jobs:
  analyze:
    name: Code Metrics Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Start Energy Measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@v4
        with:
          json-output: true
          task: start-measurement

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install OS deps (cloc, jq, curl)
        run: |
          sudo apt-get update
          sudo apt-get install -y cloc jq curl

      - name: Install scc (binary)
        run: |
          curl -sL https://github.com/boyter/scc/releases/latest/download/linux_amd64.tar.gz -o scc.tar.gz
          tar -xzf scc.tar.gz scc
          sudo mv scc /usr/local/bin/scc
          scc --version

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install \
            radon \
            lizard \
            pylint \
            mccabe \
            xenon \
            pycodestyle \
            cognitive-complexity

      - id: measurement-after-install
        name: Record Measurement After Install dependencies
        uses: green-coding-solutions/eco-ci-energy-estimation@v4
        with:
          json-output: true
          label: Install dependencies
          task: get-measurement

      - name: Check Python Files
        run: |
          echo "Found Python files:"
          find . -type f -name "*.py" -not -path "*/.*" || true

      - id: measurement-after-find
        name: Record Measurement After Check Python Files
        uses: green-coding-solutions/eco-ci-energy-estimation@v4
        with:
          json-output: true
          label: Check Python Files
          task: get-measurement

      - name: Analyze with Radon (cc/mi/raw/hal)
        run: |
          mkdir -p metrics
          : > metrics_report.txt
          PYFILES=$(find . -type f -name "*.py" -not -path "*/.*" || true)

          echo "=== Cyclomatic Complexity ===" >> metrics_report.txt
          if [ -n "$PYFILES" ]; then
            echo "$PYFILES" | xargs -r radon cc --show-complexity --average >> metrics_report.txt || true
          else
            echo "No Python files found." >> metrics_report.txt
          fi

          echo -e "\n=== Maintainability Index ===" >> metrics_report.txt
          if [ -n "$PYFILES" ]; then
            echo "$PYFILES" | xargs -r radon mi --show >> metrics_report.txt || true
          else
            echo "No Python files found." >> metrics_report.txt
          fi

          echo -e "\n=== Raw Metrics ===" >> metrics_report.txt
          if [ -n "$PYFILES" ]; then
            echo "$PYFILES" | xargs -r radon raw --summary >> metrics_report.txt || true
          else
            echo "No Python files found." >> metrics_report.txt
          fi

          echo -e "\n=== Halstead Metrics ===" >> metrics_report.txt
          if [ -n "$PYFILES" ]; then
            echo "$PYFILES" | xargs -r radon hal >> metrics_report.txt || true
          else
            echo "No Python files found." >> metrics_report.txt
          fi

      - id: measurement-after-radon
        name: Record Measurement After Analyze with Radon
        uses: green-coding-solutions/eco-ci-energy-estimation@v4
        with:
          json-output: true
          label: Analyze with Radon
          task: get-measurement

      - name: Run Lizard Analysis
        run: |
          echo -e "\n=== Detailed Code Metrics (Lizard) ===" >> metrics_report.txt
          lizard . --CCN 10 --length 100 --arguments 5 --modified --working_threads 1 >> metrics_report.txt || true

      - id: measurement-after-lizard
        name: Record Measurement After Run Lizard Analysis
        uses: green-coding-solutions/eco-ci-energy-estimation@v4
        with:
          json-output: true
          label: Run Lizard Analysis
          task: get-measurement

      - name: Analyze with Pylint
        run: |
          echo -e "\n=== Code Quality Metrics (Pylint) ===" >> metrics_report.txt
          PYFILES=$(find . -type f -name "*.py" -not -path "*/.*" || true)
          if [ -n "$PYFILES" ]; then
            # Pylint exits non-zero for warnings; don't fail the job
            echo "$PYFILES" | xargs -r -n1 pylint --output-format=text >> metrics_report.txt || true
          else
            echo "No Python files found." >> metrics_report.txt
          fi

      - id: measurement-after-pylint
        name: Record Measurement After Analyze with Pylint
        uses: green-coding-solutions/eco-ci-energy-estimation@v4
        with:
          json-output: true
          label: Analyze with Pylint
          task: get-measurement

      - name: Check complexity thresholds with Xenon
        run: |
          echo -e "\n=== Complexity Thresholds (Xenon) ===" >> metrics_report.txt
          xenon --max-absolute A --max-modules A --max-average A . >> metrics_report.txt || true

      - id: measurement-after-xenon
        name: Record Measurement After Check complexity thresholds with Xenon
        uses: green-coding-solutions/eco-ci-energy-estimation@v4
        with:
          json-output: true
          label: Check complexity thresholds with Xenon
          task: get-measurement

      - name: Generate detailed reports (JSON/XML)
        run: |
          mkdir -p metrics
          PYFILES=$(find . -type f -name "*.py" -not -path "*/.*" || true)

          if [ -n "$PYFILES" ]; then
            echo "$PYFILES" | xargs -r radon cc --json > metrics/complexity.json || echo '{}' > metrics/complexity.json
            echo "$PYFILES" | xargs -r radon raw --json > metrics/raw_metrics.json || echo '{}' > metrics/raw_metrics.json
            echo "$PYFILES" | xargs -r radon hal --json > metrics/halstead.json || echo '{}' > metrics/halstead.json
          else
            echo '{}' > metrics/complexity.json
            echo '{}' > metrics/raw_metrics.json
            echo '{}' > metrics/halstead.json
          fi

          lizard . --xml > metrics/lizard_report.xml || echo "<lizard></lizard>" > metrics/lizard_report.xml
          cp metrics_report.txt metrics/full_report.txt

      - id: measurement-after-reports
        name: Record Measurement After Generate detailed reports
        uses: green-coding-solutions/eco-ci-energy-estimation@v4
        with:
          json-output: true
          label: Generate detailed reports
          task: get-measurement

      - name: Upload metrics results
        uses: actions/upload-artifact@v4
        with:
          name: code-metrics
          path: metrics/

      - name: Convert eco-ci JSON to CSV (if present)
        run: |
          JSON_FILE="/tmp/eco-ci/total-data.json"
          if [ -f "$JSON_FILE" ]; then
            jq -r '(.[0] | keys_unsorted) as $keys | $keys, map([.[ $keys[] ]])[] | @csv' "$JSON_FILE" > eco_results.csv
          else
            echo "No JSON output found, skipping conversion." | tee eco_results.csv
          fi

      - id: measurement-after-convert
        name: Record Measurement After Convert JSON to CSV
        uses: green-coding-solutions/eco-ci-energy-estimation@v4
        with:
          json-output: true
          label: Convert JSON to CSV
          task: get-measurement

      - id: display-measurement
        name: Display Energy Results
        uses: green-coding-solutions/eco-ci-energy-estimation@v4
        with:
          json-output: true
          task: display-results

      - name: Save Total Energy Consumption Data
        run: |
          echo '${{ steps.display-measurement.outputs.data-total-json }}' > total_energy_consumption.json

      - name: Upload Energy Consumption Artifact
        uses: actions/upload-artifact@v4
        with:
          name: total-energy-consumption
          path: total_energy_consumption.json
